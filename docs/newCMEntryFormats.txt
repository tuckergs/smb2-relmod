
------ Unlock data ------
What: 
-Some entry formats have data about how to check/set whether the level in question is unlocked 
Counters:
-We can use an 8 bit counter to decide unlockedness for the unskippable levels
-The entry would specify a location and a value
-The game would check whether the entry's unlock value is less than the counter determined by the unlock location
Bit Field:
-We can also use one bit to decide unlockedness for the skippable levels
-The entry specifies which bit to look at
-This is how vanilla SMB2 decides unlockedness (the way the game decides which bit to look at is hardcoded)
Notes:
-You would probably want a new save file if your entries include counters, because the space between vanilla and mod SMB2 for storing unlockedness is shared


------ Barebone entries ------

What: 
-These let you have large challenge mode difficulties. 
-Each entry takes 8 bytes each, as opposed to the vanilla entries taking at least 84 bytes
-These entries also hold data about how to load/store whether or not the level is unlocked
-You cannot specify jump distance with these.

Instructions about how to use these:
1. If you don't have it already, get Haskell Platform or something that compiles Haskell. Or get executables of the relevant tools
2. First compile FixOverwrites.hs by running "ghc FixOverwrites.hs". Also, get PPCInject from my ppc-inject repo
3. Put your favorite mkb2.main_loop.rel into the cmasm directory
4. Run addBareBonesCode.bat in the cmasm directory 
5. Use cmmod to put your cm entries in there
